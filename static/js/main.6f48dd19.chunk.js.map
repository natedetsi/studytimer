{"version":3,"sources":["index.js","App.js"],"names":["rootElement","document","getElementById","ReactDOM","render","react_default","a","createElement","_useState","useState","_useState2","Object","slicedToArray","seconds","setSeconds","_useState3","_useState4","minutes","setMinutes","_useState5","_useState6","hours","setHours","_useState7","_useState8","active","setActive","_useState9","_useState10","start","setStart","_useState11","_useState12","counter","setCounter","_useState13","_useState14","secs","setSecs","_useState15","_useState16","hrs","setHrs","_useState17","_useState18","mins","setMins","_useState19","_useState20","hide","setHide","_useState21","_useState22","setTransition","newCounter","useEffect","interval","setInterval","prev","concat","toConsumableArray","clearInterval","props","useSpring","config","delay","duration","mass","tension","friction","opacity","marginTop","from","callBack","deps","hasMount","useRef","current","useDidUpdate","className","web","div","style","map","src","alt","Collapse","in","onClick"],"mappings":"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","file":"static/js/main.6f48dd19.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport { useSpring, animated, config } from \"react-spring\";\nimport \"./styles.css\";\n\nexport default function App() {\n  //timing functions states \n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [hours, setHours] = useState(0);\n  //toggle start and stop of the function\n  const [active, setActive] = useState(false);\n  const [start, setStart] = useState(\"START\");\n  //counter array\n  const [counter, setCounter] = useState([]);\n  //leading zeros \n  const [secs, setSecs] = useState(0);\n  const [hrs, setHrs] = useState(0);\n  const [mins, setMins] = useState(0);\n  //transion states\n  const [hide, setHide] = useState(false);\n  const [transition, setTransition] = useState(true);\n  const newCounter = \"0\";\n\n  //toggle the start and pause of the timer\n  function toggle() {\n    setActive(!active);\n    setStart(active ? \"START\" : \"PAUSE\");\n    setHide(prev => !prev);\n  }\n  //reset all functions to default\n  function reset() {\n    setSeconds(0);\n    setMinutes(0);\n    setHours(0);\n    setSecs(0);\n    setMins(0);\n    setHrs(0);\n    setActive(false);\n    setCounter([]);\n    setStart(\"START\");\n    setHide(false);\n  }\n  //adds new counter to array of counters\n  function addCounter() {\n    setCounter(prev => {\n      return [...prev, newCounter];\n    });\n  }\n  //timer and counter function\n  useEffect(() => {\n    let interval = null;\n\n    if (active) {\n      if (seconds >= 10) {\n        setSecs();\n      } else {\n        setSecs(0);\n      }\n      if (minutes >= 10) {\n        setMins();\n      } else {\n        setMins(0);\n      }\n      if (hours >= 10) {\n        setHrs();\n      } else {\n        setHrs(0);\n      }\n\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n      if (seconds === 60) {\n        setMinutes(minutes => minutes + 1);\n        setSeconds(0);\n      }\n      if (minutes === 60) {\n        setHours(hours => hours + 1);\n        setMinutes(0);\n        addCounter();\n      }\n    } else if (!active && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [active, hours, minutes, seconds]);\n  //Spring animation for the page load\n  const props = useSpring({\n    config: {\n      delay: 500,\n      duration: 1000,\n      mass: 26,\n      tension: 170,\n      friction: 100\n    },\n    opacity: 1,\n    marginTop: 50,\n    from: { opacity: 0, marginTop: -500 }\n  });\n  //timer animation\n  // wonder if this would work with a ternory operator? (active ? do : dont;)\n  function useDidUpdate(callBack, deps) {\n    const hasMount = useRef(false);\n    useEffect(() => {\n      if (hasMount.current) {\n        callBack();\n      } else {\n        hasMount.current = true;\n      }\n    }, deps);\n  }\n\n  useDidUpdate(() => {\n    setTransition(prev => !prev);\n  }, [seconds]);\n  return (\n    <div className=\"App\">\n      <animated.div style={props}>\n        <h1 className=\"title\">STUDY TIMER</h1>\n\n        {counter.map(counter => {\n          return <img className=\"star\" src=\"images/star.png\" alt=\"star\" />;\n        })}\n\n        <h1 className=\"timer\">\n          <Collapse in={hide}>\n            <span className=\"hours\">\n              <span className=\"numbers\">\n                {hrs}\n                {hours}\n              </span>\n            </span>\n            :\n            <span className=\"mins\">\n              <span className=\"numbers\">\n                {mins}\n                {minutes}\n              </span>\n            </span>\n            :\n            <span className=\"secs\">\n              <span className=\"numbers\">\n                {secs}\n                {seconds}\n              </span>\n            </span>\n          </Collapse>\n        </h1>\n        <button className=\"reset\" onClick={toggle}>\n          {start}\n        </button>\n        <button className=\"reset\" onClick={reset}>\n          RESET\n        </button>\n      </animated.div>\n    </div>\n  );\n}\n"],"sourceRoot":""}